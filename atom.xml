<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://crab011223.github.io</id>
    <title>crab011223&apos;s bolg</title>
    <updated>2021-08-17T07:56:48.701Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://crab011223.github.io"/>
    <link rel="self" href="https://crab011223.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://crab011223.github.io/images/avatar.png</logo>
    <icon>https://crab011223.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, crab011223&apos;s bolg</rights>
    <entry>
        <title type="html"><![CDATA[js基础]]></title>
        <id>https://crab011223.github.io/post/js-ji-chu/</id>
        <link href="https://crab011223.github.io/post/js-ji-chu/">
        </link>
        <updated>2021-08-17T07:42:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="js的组成">js的组成</h3>
<h6 id="javascript">JavaScript :</h6>
<p>1.ECMAScript  :  JavaScript语法</p>
<p>2.DOM  ：  页面文档对象模型</p>
<p>3.BOM  ：  浏览器对象模型</p>
<h3 id="javascript输入输出语句">javascript输入输出语句</h3>
<h6 id="方法-说明-归属">方法                               说明                                                       归属</h6>
<p>alert(msg)                     浏览器弹出警示框                                浏览器</p>
<p>console.log(msg)         浏览器控制台打印输出信息                 浏览器</p>
<p>prompt(info)                浏览器弹出输入框，用户可以输入      浏览器</p>
<h3 id="变量">变量</h3>
<h6 id="1更新变量">1.更新变量</h6>
<p>一个变量被重新赋值后，它原有的值就会被覆盖，变量值将以最后一次赋值为准。</p>
<h6 id="2同时声明多个变量">2.同时声明多个变量</h6>
<p>var age = 18,</p>
<p>​       address = '人民路' ，</p>
<p>​       salary = 12000；</p>
<h6 id="3声明变量的特殊情况">3.声明变量的特殊情况</h6>
<p>3.1 只声明不赋值</p>
<p>var sex;</p>
<p>console.log(sex); //undefined</p>
<p>3.2 不声明 不赋值 直接使用</p>
<p>console.log(tel); //报错</p>
<p>3.3 不声明直接赋值使用</p>
<p>qq = 110;</p>
<p>console.log(qq); //能正常输出</p>
<h6 id="4变量命名规范">4.变量命名规范</h6>
<p>由字母、数字、下划线、美元符号$组成</p>
<p>严格区分大小写</p>
<p>不能以数字开头</p>
<p>不能是关键字、保留字</p>
<p>变量名必须有意义</p>
<p>遵守驼峰命名法：首字母小写，后面单词的首字母大写</p>
<p>name不是关键字也不是保留字，但是一般在浏览器里面有特殊的含义，尽量不要用这个单词作为变量名</p>
<h3 id="数据类型">数据类型</h3>
<p>js是一种弱类型或者说动态语言</p>
<h5 id="简单数据类型">简单数据类型</h5>
<h6 id="简单数据类型-说明-默认值">简单数据类型        说明                                                                                          默认值</h6>
<p>Number                 数字型，包含整型值和浮点型值，如21/0.21                      0</p>
<p>Boolean                 布尔值类型，如true、false，等价于1和0                           false</p>
<p>String                      字符串类型，如&quot;张三&quot;                                                            &quot;&quot;</p>
<p>Undefined              var a;声明了变量a但是没有赋值，此时a=undefined        undefined</p>
<p>Null                          var a = null;声明了变量a为空值                                           null</p>
<h6 id="数字型number">数字型Number</h6>
<p>数字型最大值：Number.MAX_VALUE</p>
<p>数字型最小值：Number.MIN_VALUE</p>
<p>Infinity：代表无穷大，大于任何数值</p>
<p>-Infinity：代表无穷小，小于任何数值</p>
<p>NaN，Not a number，代表一个非数值</p>
<p>方法 isNaN() 判断：是数字返回false，不是数字返回true</p>
<h6 id="字符串型string">字符串型String</h6>
<p>单引号双引号都可以，JS更推荐使用单引号</p>
<p>引号有就近原则，应该单双引号嵌套使用，外单内双或外双内单才不会报错</p>
<p>字符串转义符：\b 空格，b是blank的意思</p>
<p>通过字符串的length属性可以获取整个字符串的长度</p>
<p>字符串+任何类型=拼接之后的新字符串</p>
<h6 id="布尔型boolean">布尔型Boolean</h6>
<p>true参与加法运算当1来看</p>
<p>false参与加法运算当0来看</p>
<h6 id="undefined-和-null">Undefined 和 Null</h6>
<p>var variable;</p>
<p>console.log(variable);        //undefined</p>
<p>console.log('你好'+variable);        //你好undefined</p>
<p>console.log(11+variable)；        //NaN</p>
<p>console.log(true+variable);        //NaN</p>
<p>var vari = null;</p>
<p>console.log('你好'+vari);        //你好null</p>
<p>console.log(11+vari);        //11</p>
<p>console.log(true+vari);        //1</p>
<h5 id="获取变量数据类型">获取变量数据类型</h5>
<h6 id="typeof检测变量数据类型">typeof检测变量数据类型</h6>
<p>prompt取的值是 字符型 的</p>
<h6 id="字面量">字面量</h6>
<h5 id="数据类型转换">数据类型转换</h5>
<h6 id="转换为字符串">转换为字符串</h6>
<p>①变量.toString()</p>
<p>var num = 10;</p>
<p>var str = num.toString();</p>
<p>②String(变量)</p>
<p>String(num);</p>
<p>③利用+拼接字符串</p>
<p>num+' '</p>
<h6 id="转换为数字型重点">转换为数字型（重点）</h6>
<p>①parseInt(string)函数</p>
<p>将string类型转成整数数值型，无法转换成浮点型</p>
<p>parseInt('78');//78</p>
<p>parseInt('3.83');//3</p>
<p>parseInt('120px');//120    会去掉px</p>
<p>parseInt('rem120px');//NaN    因为最开始读取到rem就不是数字 所以输出NaN</p>
<p>②parseFloat(string)函数</p>
<p>将string类型转成浮点数数值型</p>
<p>parseFloat('3.83');//3.83</p>
<p>parseFloat('120px');//120    会去掉px</p>
<p>parseFloat('rem120px');//NaN    因为最开始读取到rem就不是数字 所以输出NaN</p>
<p>③Number()强制转换函数</p>
<p>将string类型转换成数值型</p>
<p>Number('12')</p>
<p>④js隐式转换(- * /)</p>
<p>利用算数运算隐式转换为数值型</p>
<p>'12' - 0 //12</p>
<p>'123' - '120' //3</p>
<p>'123' * 1 //123</p>
<p>'123' / 1   //123</p>
<h6 id="转换为布尔型">转换为布尔型</h6>
<p>Boolean()函数</p>
<p>其他类型转换成布尔值</p>
<p>Boolean('true');</p>
<p>代表空、否定的值会被转换为false，如''、0、NaN、null、undefined</p>
<p>其余的值都会被转换为true</p>
<h3 id="javascript运算符">JavaScript运算符</h3>
<h6 id="算术运算符">算术运算符</h6>
<p>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数</p>
<p>var a = 0.1+0.2;</p>
<p>console.log(a==0.3);//false</p>
<h6 id="递增和递减运算符">递增和递减运算符</h6>
<p>前置递增和后置递增的区别</p>
<h6 id="比较运算符">比较运算符</h6>
<p>console.log(18 == 18);    //true</p>
<p>console.log(18 == '18');    //true</p>
<p>console.log(18 === 18);    //true</p>
<p>console.log(18 ==='18');    //false</p>
<p>== 判断  判断两边值是否相等（有隐式转换）</p>
<p>=== 全等  判断两边的值和数据类型是否完全相同</p>
<h6 id="逻辑运算符">逻辑运算符</h6>
<p>&amp;&amp; || !</p>
<p>逻辑与短路运算：如果表达式1结果为真，则返回表达式2；如果表达式1结果为假，则返回表达式1</p>
<p>console.log(123 &amp;&amp; 456);//456</p>
<p>console.log(0 &amp;&amp; 456);//0</p>
<p>console.log('' &amp;&amp; 1+2 &amp;&amp; 456);//''</p>
<p>表示空或否定的为假(如0 '' null undefined NaN)，其余为真</p>
<p>逻辑或短路运算：如果表达式1结果为真，则返回表达式1；如果表达式1结果为假，则返回表达式2</p>
<p>var num = 0;</p>
<p>console.log(123 || num++);//123</p>
<p>console.log(num);//0</p>
<h6 id="赋值运算符">赋值运算符</h6>
<h6 id="运算符优先级">运算符优先级</h6>
<h3 id="流程控制分支结构">流程控制分支结构</h3>
<h6 id="if语句">if语句</h6>
<h6 id="三元表达式">三元表达式</h6>
<h6 id="switch语句">switch语句</h6>
<p>switch(num){</p>
<p>​    case 1:</p>
<p>​           ...</p>
<p>}</p>
<p>num值和case里面的值相匹配时是全等，值和数据类型一致才可以匹配</p>
<h3 id="数组">数组</h3>
<p>利用new创建数组</p>
<p>var arr = new Array()；</p>
<p>利用数组字面量创建数组</p>
<p>var arr = []; //一般常用这种</p>
<h3 id="函数">函数</h3>
<h6 id="函数形参和实参匹配问题">函数形参和实参匹配问题</h6>
<p>1.如果实参的个数和形参的个数一致，则正常输出结果</p>
<p>2.如果实参的个数多于形参的个数，则会取到形参的个数</p>
<p>3.如果实参的个数少于形参的个数，多余的形参定义为undefined，最终的结果是NaN</p>
<h6 id="return">return</h6>
<p>1.return 终止函数</p>
<p>2.return 只能返回一个值，如果return后面的结果用逗号隔开，只返回最后一个</p>
<p>3.函数没有return，返回undefined</p>
<h6 id="arguments的使用">arguments的使用</h6>
<p>当我们不确定有多少个参数传递的时候，可以用arguments来获取。在JavaScript中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有实参。</p>
<p>arguments展示形式是一个伪数组，因此可以进行遍历。伪数组具有以下特点：</p>
<ul>
<li>具有length属性</li>
<li>按索引方式储存数据</li>
<li>不具有数组的push,pop等方法</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://crab011223.github.io/post/hello-gridea/</id>
        <link href="https://crab011223.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>